package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Autor;

public class AutorManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableAutor = "CREATE TABLE Autor(id int GENERATED BY DEFAULT AS IDENTITY, autorPer varchar(20), wzrost integer, obywatelstwo varchar(20))";

	private PreparedStatement addAutorStmt;
	private PreparedStatement deleteAllAutorsStmt;
	private PreparedStatement getAllAutorsStmt;
	private PreparedStatement getAutorStmt;
	private PreparedStatement modifyAutorStmt;
	private PreparedStatement deleteAutorStmt;
	private PreparedStatement getIdByAutorPer;

	private Statement statement;
	public AutorManager(PreparedStatement deleteAllAutorsStmt){
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Autor".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists){
				statement.executeUpdate(createTableAutor);
			}
			addAutorStmt = connection
					.prepareStatement("INSERT INTO Autor (autorPer, wzrost, obywatelstwo) VALUES (?, ?, ?)");
			deleteAllAutorsStmt = connection
					.prepareStatement("DELETE FROM Autor");
			getAllAutorsStmt = connection
					.prepareStatement("SELECT id, autorPer, wzrost, obywatelstwo FROM Autor");
			getAutorStmt = connection
					.prepareStatement("SELECT id, autorPer, wzrost, obywatelstwo FROM Autor WHERE autorPer=?");
			modifyAutorStmt = connection
					.prepareStatement("UPDATE Autor SET obywatelstwo=? WHERE autorPer=?");
			deleteAutorStmt = connection
					.prepareStatement("DELETE FROM Autor WHERE autorPer=?");
			getIdByAutorPer = connection
					.prepareStatement("SELECT id FROM Autor WHERE autorPer=?");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	
	public Connection getConnection(){
		return connection;
	}
	
	public void vanishAutors() {
		try {
			deleteAllAutorsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int getAutorsIdByAutorPer(String autorPer){
		int id = -1;
		try {
			getIdByAutorPer.setString(1, autorPer);
			ResultSet rs = getIdByAutorPer.executeQuery();
			if(!rs.next()){
				id = -1;
			}
			id = rs.getInt("id");
		} catch (SQLException e){
			e.printStackTrace();
		}
		return id;
		
	}
	
	public int addAutor(Autor autor){ 
		int count = 0;
		try {
			addAutorStmt.setString(1, autor.getAutorPer());
			addAutorStmt.setInt(2, autor.getWzrost());
			addAutorStmt.setString(3, autor.getObywatelstwo());

			count = addAutorStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int modifyAutor(String autorPer, String obywatelstwo){ 
		int count = 0;
		try {
			modifyAutorStmt.setString(1, obywatelstwo);
			modifyAutorStmt.setString(2, autorPer);
			count = modifyAutorStmt.executeUpdate();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteAutor(String autorPer){ 
		int count = 0;
		try {
			deleteAutorStmt.setString(1, autorPer);
			count = deleteAutorStmt.executeUpdate();
		} catch(SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	public Autor getAutor(String autorPer){ 
		Autor a = new Autor();
		try {
			getAutorStmt.setString(1, autorPer);
			ResultSet rs = getAutorStmt.executeQuery();
			if(!rs.next()){
				return null;
			}
			a.setId(rs.getInt("id"));
			a.setAutorPers(rs.getString("autorPer"));
			a.setWzrost(rs.getInt("wzrost"));
			a.setObywatelstwo(rs.getString("obywatelstwo"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return a;
	}
	public List<Autor> getAllAutors() { 
		List<Autor> autors = new ArrayList<Autor>();

		try {
			ResultSet rs = getAllAutorsStmt.executeQuery();
			
			while (rs.next()) {
				Autor a = new Autor();
				a.setId(rs.getInt("id"));
				a.setAutorPers(rs.getString("autorPer"));
				a.setWzrost(rs.getInt("wzrost"));
				a.setObywatelstwo(rs.getString("obywatelstwo"));;
				autors.add(a);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return autors;
	}
}






